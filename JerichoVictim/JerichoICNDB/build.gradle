plugins {
	id 'java'
	id 'application'
	id "org.jetbrains.kotlin.jvm" version "1.3.0"
	id "org.sonarqube" version "2.6.2"
}

group 'de.thro.inf.sa'
version '1.0-SNAPSHOT'

sourceCompatibility =  JavaVersion.VERSION_1_8
mainClassName = "io.vertx.core.Launcher"
def mainVerticleName = "de.fhro.inf.sa.jerichoDemo.MainApiVerticle"
def watchForChange = 'src/**/*.*'

def doOnChange
if (System.getProperty("os.name").toLowerCase().contains("windows")) {
    doOnChange = '.\\gradlew classes'
} else {
    doOnChange = './gradlew classes'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("io.vertx:vertx-core:${vertx_version}")
    implementation("io.vertx:vertx-web:${vertx_version}")
    implementation("io.vertx:vertx-config:${vertx_version}")
    implementation("io.vertx:vertx-lang-kotlin:${vertx_version}")
    implementation("com.englishtown.vertx:vertx-guice:${vertx_guice_version}")
    implementation("org.liquibase:liquibase-core:${liquibase_version}")
    implementation("org.postgresql:postgresql:${pgsql_driver_version}")

    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_datatype_jsr310_version}")
    implementation("io.github.jklingsporn:vertx-jooq-async-future:${vertx_jooq_async_future_version}")
    implementation("org.jooq:jooq:${jooq_version}")
    implementation("org.slf4j:slf4j-api:${slf4j_version}")

	/* Kotlin STDlib */
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

	testCompile("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
	testRuntime("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
	testRuntime("org.apache.logging.log4j:log4j-api:${log4j_version}")
	testRuntime("org.apache.logging.log4j:log4j-core:${log4j_version}")


}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

run {
    def cmdArgs = ""
    if(project.hasProperty("appArgs")) {
        cmdArgs = project.findProperty("appArgs")
    }
    args = [
            'run',
            mainVerticleName,
            "--launcher-class=$mainClassName",
            "--debug-jvm",
            "--conf application-conf.json",
            cmdArgs
    ]
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "**/generated/**/*.*"
    }
}
