buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6-rc1"
    }
}

group 'de.fhro.inf.sa'
version '1.0-SNAPSHOT'


apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'application'
apply plugin: "org.sonarqube"

sourceCompatibility = 1.8
mainClassName = "io.vertx.core.Launcher"
def mainVerticleName = "de.fhro.inf.sa.jerichoDemo.MainApiVerticle"
def watchForChange = 'src/**/*.*'

def doOnChange
if (System.getProperty("os.name").toLowerCase().contains("windows")) {
    doOnChange = '.\\gradlew classes'
} else {
    doOnChange = './gradlew classes'
}

repositories {
    mavenCentral()
}

dependencies {
    compile("io.vertx:vertx-core:${vertx_version}")
    compile("io.vertx:vertx-web:${vertx_version}")
    compile("io.vertx:vertx-config:${vertx_version}")
    compile("io.vertx:vertx-lang-kotlin:${vertx_version}")
    compile("com.englishtown.vertx:vertx-guice:${vertx_guice_version}")
    compile("org.liquibase:liquibase-core:${liquibase_version}")
    compile("org.postgresql:postgresql:${pgsql_driver_version}")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_datatype_jsr310_version}")
    compile("io.github.jklingsporn:vertx-jooq-async-future:${vertx_jooq_async_future_version}")
    compile("org.jooq:jooq:${jooq_version}")
    compile("org.slf4j:slf4j-api:${slf4j_version}")
    testCompile("org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}")
    testRuntime("org.junit.platform:junit-platform-launcher:${junit_platform_version}")
    testRuntime("org.apache.logging.log4j:log4j-core:${log4j_version}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4j_version}")


}

junitPlatform {
    logManager 'org.apache.logging.log4j.jul.LogManager'
    reportsDir file('build/test-results/junit-platform') // this is the default
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

run {
    def cmdArgs = ""
    if(project.hasProperty("appArgs")) {
        cmdArgs = project.findProperty("appArgs")
    }
    args = [
            'run',
            mainVerticleName,
            "--launcher-class=$mainClassName",
            "--debug-jvm",
            "--conf application-conf.json",
            cmdArgs
    ]
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "**/generated/**/*.*"
    }
}