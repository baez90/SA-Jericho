/*
 * This file is generated by jOOQ.
*/
package de.fhro.inf.sa.jerichoDemo.persisence.generated.tables;


import de.fhro.inf.sa.jerichoDemo.persisence.generated.Keys;
import de.fhro.inf.sa.jerichoDemo.persisence.generated.Public;
import de.fhro.inf.sa.jerichoDemo.persisence.generated.tables.records.JokesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Jokes extends TableImpl<JokesRecord> {

    private static final long serialVersionUID = 860095314;

    /**
     * The reference instance of <code>public.jokes</code>
     */
    public static final Jokes JOKES = new Jokes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JokesRecord> getRecordType() {
        return JokesRecord.class;
    }

    /**
     * The column <code>public.jokes.id</code>.
     */
    public final TableField<JokesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('jokes_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.jokes.joke</code>.
     */
    public final TableField<JokesRecord, String> JOKE = createField("joke", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.jokes.categoryId</code>.
     */
    public final TableField<JokesRecord, Integer> CATEGORYID = createField("categoryId", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.jokes</code> table reference
     */
    public Jokes() {
        this("jokes", null);
    }

    /**
     * Create an aliased <code>public.jokes</code> table reference
     */
    public Jokes(String alias) {
        this(alias, JOKES);
    }

    private Jokes(String alias, Table<JokesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Jokes(String alias, Table<JokesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JokesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOKES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JokesRecord> getPrimaryKey() {
        return Keys.PK_JOKES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JokesRecord>> getKeys() {
        return Arrays.<UniqueKey<JokesRecord>>asList(Keys.PK_JOKES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JokesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JokesRecord, ?>>asList(Keys.JOKES__FK_CATEGORY_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Jokes as(String alias) {
        return new Jokes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Jokes rename(String name) {
        return new Jokes(name, null);
    }
}
